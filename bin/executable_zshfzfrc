#!/usr/bin/env bash

export FORGIT_COPY_CMD='wl-copy'

# pacman helper
# Unified package manager with source and mode switching
psf() {
    mode='install'
    source='pacman'

    while true; do
        # Determine list command based on source and mode
        case "$source-$mode" in
            pacman-install)   list_cmd="pacman -Slq" ;;
            pacman-uninstall) list_cmd="pacman -Qq" ;;
            aur-install)      list_cmd="paru -Slq --aur" ;;
            aur-uninstall)    list_cmd="paru -Qq --aur" ;;
        esac

        # Determine preview command based on source
        case "$source" in
            pacman) preview_cmd="pacman --color=always -Si {1}" ;;
            aur)    preview_cmd="paru --color=always -Si {1}" ;;
        esac

        # Create header with current state
        header="$(echo $mode | tr '[:lower:]' '[:upper:]') $(echo $source | tr '[:lower:]' '[:upper:]') packages | Ctrl-Space: Add/Remove pkg | Ctrl-A: AUR/Pacman"

        result=$(sh -c "$list_cmd" | fzf \
            --multi \
            --preview "$preview_cmd" \
            --expect=ctrl-space,ctrl-a \
            --header="$header")

        key=$(head -1 <<< "$result")
        pkgs=($(tail -n +2 <<< "$result"))

        case "$key" in
            ctrl-space)
                mode=$( [ "$mode" = 'install' ] && echo 'uninstall' || echo 'install' )
                ;;
            ctrl-a)
                source=$( [ "$source" = 'pacman' ] && echo 'aur' || echo 'pacman' )
                ;;
            *)
                if [ "${#pkgs[@]}" -gt 0 ]; then
                    case "$source-$mode" in
                        pacman-install)
                            sudo pacman -S "${pkgs[@]}" && break
                            ;;
                        pacman-uninstall)
                            sudo pacman -Rns "${pkgs[@]}" && break
                            ;;
                        aur-install)
                            paru -S "${pkgs[@]}" && break
                            ;;
                        aur-uninstall)
                            paru -Rns "${pkgs[@]}" && break
                            ;;
                    esac
                else
                    break
                fi
                ;;
        esac
    done
}

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
fkill() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

gcbb() {
  local tags branches target
  branches=$(
  git --no-pager branch --sort=-committerdate --all \
    --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
      tags=$(
      git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
      target=$(
      (echo "$branches"; echo "$tags") |
        fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git log master..{2} --graph --pretty=format:'%Cgreen(%<(7,trunc)%cr) %C(bold blue)%<(7,trunc)<%an>%Creset %s %C(yellow)%d%Creset' --color=always --abbrev-commit --date=relative") || return
              git checkout "$(awk '{print $2}' <<<"$target" )"
}

# open file in vim with preview
fe() {
    local files_to_edit
    exec < /dev/tty

    IFS=$'\n' files_to_edit=($(
        fd --type f --hidden --follow \
            --exclude ".git" \
            --exclude ".config/nvim/undodir/" \
            --exclude "node_modules" \
            --exclude "target" \
            --exclude "dist" \
            --exclude "build" \
            --exclude "*cache*" \
            --exclude "*Cache*" \
            --exclude ".mozilla" \
            --exclude ".wine" \
            --exclude ".conda" \
            --exclude ".local/share/Steam" \
            --exclude ".steam" \
            . "$HOME" | \
            fzf --preview 'bat --style=numbers,changes --color=always --line-range :100 --wrap never {} 2>/dev/null || cat {}' \
            --preview-window='right:60%:wrap' \
            --query="$1" \
            --multi \
            --select-1 \
            --exit-0 \
            --height=80% \
            --border
        ))

        if [[ -n "$files_to_edit" ]]; then
            ${EDITOR:-nvim} "${files_to_edit[@]}"
        fi
    }
zle -N fe
bindkey "^p" fe


export FZF_DEFAULT_COMMAND='
fd --type f --hidden --follow \
  --exclude ".git" \
  --exclude ".mozilla" \
  --exclude ".wine" \
  --exclude "*cache*" \
  --exclude "*Cache*" \
  --exclude "node_modules" \
  --exclude ".npm" \
  --exclude ".yarn" \
  --exclude ".pnpm-store" \
  --exclude ".electron*" \
  --exclude ".steam" \
  --exclude ".conda" \
  --exclude "Steam" \
  --exclude "Music" \
  --exclude "Videos" \
  --exclude ".vscode*" \
  --exclude ".gradle" \
  --exclude ".nvm" \
  --exclude ".zplug" \
  --exclude ".forgit" \
  --exclude ".cargo/registry" \
  --exclude ".cargo/git" \
  --exclude ".m2" \
  --exclude ".pyenv" \
  --exclude "target" \
  --exclude "dist" \
  --exclude "build" \
  --exclude ".config/nvim/undodir" \
  . 2>/dev/null'


#export FZF_DEFAULT_COMMAND='rg --column --line-number --no-heading --smart-case --files --hidden --follow -g "!{.mozilla,.wine,*cache*,*Cache*,.node*,.electron*,.steam,.cache,.git,Steam,Music,Videos,.vscode*,.gradle,.nvm,.zplug,.forgit,.cargo,.m2,.pyenv}" 2> /dev/null'
#export FZF_DEFAULT_COMMAND='
  #( \
    #fd --type f --hidden --follow \
      #--exclude "nvim/undodir/" \ # Exclude undodir relative to $HOME/.config search
      #. "$HOME/.config"; \
    #fd --type f --hidden --follow \
      #--exclude "$HOME/.config" \ # Exclude the entire .config dir from this $HOME search
      #--exclude ".config/nvim/undodir/" \ # Specific exclusion for undodir in $HOME search
      #--exclude ".git" \
      #--exclude ".mozilla" \
      #--exclude ".wine" \
      #--exclude "*cache*" \
      #--exclude "*Cache*" \
      #--exclude ".node_modules" \
      #--exclude "node_modules" \
      #--exclude ".npm" \
      #--exclude ".yarn" \
      #--exclude ".pnpm-store" \
      #--exclude ".electron*" \
      #--exclude ".steam" \
      #--exclude ".conda" \
      #--exclude "Steam" \
      #--exclude "Music" \
      #--exclude "Videos" \
      #--exclude ".vscode*" \
      #--exclude ".gradle" \
      #--exclude ".nvm" \
      #--exclude ".zplug" \
      #--exclude ".forgit" \
      #--exclude ".cargo/registry" \
      #--exclude ".cargo/git" \
      #--exclude ".m2" \
      #--exclude ".pyenv" \
      #--exclude "target" \
      #--exclude "dist" \
      #--exclude "build" \
      #. "$HOME" \
  #) | awk "!seen[\$0]++" 2>/dev/null
#'

export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
--border
--bind='alt-k:preview-up,alt-p:preview-up'
--bind='alt-j:preview-down,alt-n:preview-down'
--color='bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934''

export FZF_ALT_C_OPTS="--header='Jump to directory' --preview 'tree -C {} | head -200'"
export FZF_CTRL_R_OPTS="--header='Run command from history' --sort --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

hgr() {
  if [ -z "$1" ]; then
    echo "Usage: hgr <pattern>"
    return 1
  fi
  # Option 1: Search raw history lines (includes timestamps)
  # rg --color=always --line-number --context=2 -- "$@" "$HISTFILE"

  # Option 2: Search only the command part of history lines
  # The `sed` command below is a bit more robust than `cut` if there are commands with semicolons
  # It removes everything up to and including the first ';'.
  # If your commands don't have semicolons, `cut -d ';' -f 2-` is simpler.
  sed 's/^[^;]*;//' "$HISTFILE" | rg --color=always --line-number --context=2 -- "$@"
}

# If you want to pipe the results to fzf for interactive filtering:
hgrf() {
  if [ -z "$1" ]; then
    echo "Usage: hgrf <pattern>"
    return 1
  fi
  sed 's/^[^;]*;//' "$HISTFILE" | rg --color=always --line-number --context=2 -- "$@" | fzf --ansi --multi
}
